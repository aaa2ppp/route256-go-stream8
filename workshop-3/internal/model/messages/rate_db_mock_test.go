package messages

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/go/classroom-4/teachers/homework/internal/model/messages.RateDB -o ./rate_db_mock_test.go -n RateDBMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/go/classroom-4/teachers/homework/internal/domain"
)

// RateDBMock implements RateDB
type RateDBMock struct {
	t minimock.Tester

	funcGetRate          func(ctx context.Context, code string, date time.Time) (rp1 *domain.Rate, err error)
	inspectFuncGetRate   func(ctx context.Context, code string, date time.Time)
	afterGetRateCounter  uint64
	beforeGetRateCounter uint64
	GetRateMock          mRateDBMockGetRate
}

// NewRateDBMock returns a mock for RateDB
func NewRateDBMock(t minimock.Tester) *RateDBMock {
	m := &RateDBMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetRateMock = mRateDBMockGetRate{mock: m}
	m.GetRateMock.callArgs = []*RateDBMockGetRateParams{}

	return m
}

type mRateDBMockGetRate struct {
	mock               *RateDBMock
	defaultExpectation *RateDBMockGetRateExpectation
	expectations       []*RateDBMockGetRateExpectation

	callArgs []*RateDBMockGetRateParams
	mutex    sync.RWMutex
}

// RateDBMockGetRateExpectation specifies expectation struct of the RateDB.GetRate
type RateDBMockGetRateExpectation struct {
	mock    *RateDBMock
	params  *RateDBMockGetRateParams
	results *RateDBMockGetRateResults
	Counter uint64
}

// RateDBMockGetRateParams contains parameters of the RateDB.GetRate
type RateDBMockGetRateParams struct {
	ctx  context.Context
	code string
	date time.Time
}

// RateDBMockGetRateResults contains results of the RateDB.GetRate
type RateDBMockGetRateResults struct {
	rp1 *domain.Rate
	err error
}

// Expect sets up expected params for RateDB.GetRate
func (mmGetRate *mRateDBMockGetRate) Expect(ctx context.Context, code string, date time.Time) *mRateDBMockGetRate {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateDBMock.GetRate mock is already set by Set")
	}

	if mmGetRate.defaultExpectation == nil {
		mmGetRate.defaultExpectation = &RateDBMockGetRateExpectation{}
	}

	mmGetRate.defaultExpectation.params = &RateDBMockGetRateParams{ctx, code, date}
	for _, e := range mmGetRate.expectations {
		if minimock.Equal(e.params, mmGetRate.defaultExpectation.params) {
			mmGetRate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRate.defaultExpectation.params)
		}
	}

	return mmGetRate
}

// Inspect accepts an inspector function that has same arguments as the RateDB.GetRate
func (mmGetRate *mRateDBMockGetRate) Inspect(f func(ctx context.Context, code string, date time.Time)) *mRateDBMockGetRate {
	if mmGetRate.mock.inspectFuncGetRate != nil {
		mmGetRate.mock.t.Fatalf("Inspect function is already set for RateDBMock.GetRate")
	}

	mmGetRate.mock.inspectFuncGetRate = f

	return mmGetRate
}

// Return sets up results that will be returned by RateDB.GetRate
func (mmGetRate *mRateDBMockGetRate) Return(rp1 *domain.Rate, err error) *RateDBMock {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateDBMock.GetRate mock is already set by Set")
	}

	if mmGetRate.defaultExpectation == nil {
		mmGetRate.defaultExpectation = &RateDBMockGetRateExpectation{mock: mmGetRate.mock}
	}
	mmGetRate.defaultExpectation.results = &RateDBMockGetRateResults{rp1, err}
	return mmGetRate.mock
}

//Set uses given function f to mock the RateDB.GetRate method
func (mmGetRate *mRateDBMockGetRate) Set(f func(ctx context.Context, code string, date time.Time) (rp1 *domain.Rate, err error)) *RateDBMock {
	if mmGetRate.defaultExpectation != nil {
		mmGetRate.mock.t.Fatalf("Default expectation is already set for the RateDB.GetRate method")
	}

	if len(mmGetRate.expectations) > 0 {
		mmGetRate.mock.t.Fatalf("Some expectations are already set for the RateDB.GetRate method")
	}

	mmGetRate.mock.funcGetRate = f
	return mmGetRate.mock
}

// When sets expectation for the RateDB.GetRate which will trigger the result defined by the following
// Then helper
func (mmGetRate *mRateDBMockGetRate) When(ctx context.Context, code string, date time.Time) *RateDBMockGetRateExpectation {
	if mmGetRate.mock.funcGetRate != nil {
		mmGetRate.mock.t.Fatalf("RateDBMock.GetRate mock is already set by Set")
	}

	expectation := &RateDBMockGetRateExpectation{
		mock:   mmGetRate.mock,
		params: &RateDBMockGetRateParams{ctx, code, date},
	}
	mmGetRate.expectations = append(mmGetRate.expectations, expectation)
	return expectation
}

// Then sets up RateDB.GetRate return parameters for the expectation previously defined by the When method
func (e *RateDBMockGetRateExpectation) Then(rp1 *domain.Rate, err error) *RateDBMock {
	e.results = &RateDBMockGetRateResults{rp1, err}
	return e.mock
}

// GetRate implements RateDB
func (mmGetRate *RateDBMock) GetRate(ctx context.Context, code string, date time.Time) (rp1 *domain.Rate, err error) {
	mm_atomic.AddUint64(&mmGetRate.beforeGetRateCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRate.afterGetRateCounter, 1)

	if mmGetRate.inspectFuncGetRate != nil {
		mmGetRate.inspectFuncGetRate(ctx, code, date)
	}

	mm_params := &RateDBMockGetRateParams{ctx, code, date}

	// Record call args
	mmGetRate.GetRateMock.mutex.Lock()
	mmGetRate.GetRateMock.callArgs = append(mmGetRate.GetRateMock.callArgs, mm_params)
	mmGetRate.GetRateMock.mutex.Unlock()

	for _, e := range mmGetRate.GetRateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmGetRate.GetRateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRate.GetRateMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRate.GetRateMock.defaultExpectation.params
		mm_got := RateDBMockGetRateParams{ctx, code, date}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRate.t.Errorf("RateDBMock.GetRate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRate.GetRateMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRate.t.Fatal("No results are set for the RateDBMock.GetRate")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmGetRate.funcGetRate != nil {
		return mmGetRate.funcGetRate(ctx, code, date)
	}
	mmGetRate.t.Fatalf("Unexpected call to RateDBMock.GetRate. %v %v %v", ctx, code, date)
	return
}

// GetRateAfterCounter returns a count of finished RateDBMock.GetRate invocations
func (mmGetRate *RateDBMock) GetRateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRate.afterGetRateCounter)
}

// GetRateBeforeCounter returns a count of RateDBMock.GetRate invocations
func (mmGetRate *RateDBMock) GetRateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRate.beforeGetRateCounter)
}

// Calls returns a list of arguments used in each call to RateDBMock.GetRate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRate *mRateDBMockGetRate) Calls() []*RateDBMockGetRateParams {
	mmGetRate.mutex.RLock()

	argCopy := make([]*RateDBMockGetRateParams, len(mmGetRate.callArgs))
	copy(argCopy, mmGetRate.callArgs)

	mmGetRate.mutex.RUnlock()

	return argCopy
}

// MinimockGetRateDone returns true if the count of the GetRate invocations corresponds
// the number of defined expectations
func (m *RateDBMock) MinimockGetRateDone() bool {
	for _, e := range m.GetRateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRate != nil && mm_atomic.LoadUint64(&m.afterGetRateCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetRateInspect logs each unmet expectation
func (m *RateDBMock) MinimockGetRateInspect() {
	for _, e := range m.GetRateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RateDBMock.GetRate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRateCounter) < 1 {
		if m.GetRateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RateDBMock.GetRate")
		} else {
			m.t.Errorf("Expected call to RateDBMock.GetRate with params: %#v", *m.GetRateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRate != nil && mm_atomic.LoadUint64(&m.afterGetRateCounter) < 1 {
		m.t.Error("Expected call to RateDBMock.GetRate")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RateDBMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetRateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RateDBMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RateDBMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetRateDone()
}
