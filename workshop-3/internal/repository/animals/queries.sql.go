// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: queries.sql

package animals

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAnimal = `-- name: GetAnimal :one
SELECT id, nickname, birthday, weight FROM animals WHERE id = $1
`

func (q *Queries) GetAnimal(ctx context.Context, id int64) (Animal, error) {
	row := q.db.QueryRow(ctx, getAnimal, id)
	var i Animal
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Birthday,
		&i.Weight,
	)
	return i, err
}

const insert = `-- name: Insert :exec
insert into animals (nickname, birthday, weight) VALUES ($1, $2, $3)
`

type InsertParams struct {
	Nickname string           `json:"nickname"`
	Birthday pgtype.Timestamp `json:"birthday"`
	Weight   int32            `json:"weight"`
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) error {
	_, err := q.db.Exec(ctx, insert, arg.Nickname, arg.Birthday, arg.Weight)
	return err
}

const listAnimals = `-- name: ListAnimals :many
SELECT id, nickname, birthday, weight FROM animals
`

func (q *Queries) ListAnimals(ctx context.Context) ([]Animal, error) {
	rows, err := q.db.Query(ctx, listAnimals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Animal
	for rows.Next() {
		var i Animal
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.Birthday,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
