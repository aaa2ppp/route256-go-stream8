// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/messages.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.ozon.dev/go/classroom-4/teachers/homework/internal/domain"
)

// MockCurrencyExchangeRateUpdater is a mock of CurrencyExchangeRateUpdater interface.
type MockCurrencyExchangeRateUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyExchangeRateUpdaterMockRecorder
}

// MockCurrencyExchangeRateUpdaterMockRecorder is the mock recorder for MockCurrencyExchangeRateUpdater.
type MockCurrencyExchangeRateUpdaterMockRecorder struct {
	mock *MockCurrencyExchangeRateUpdater
}

// NewMockCurrencyExchangeRateUpdater creates a new mock instance.
func NewMockCurrencyExchangeRateUpdater(ctrl *gomock.Controller) *MockCurrencyExchangeRateUpdater {
	mock := &MockCurrencyExchangeRateUpdater{ctrl: ctrl}
	mock.recorder = &MockCurrencyExchangeRateUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyExchangeRateUpdater) EXPECT() *MockCurrencyExchangeRateUpdaterMockRecorder {
	return m.recorder
}

// UpdateCurrencyExchangeRatesOn mocks base method.
func (m *MockCurrencyExchangeRateUpdater) UpdateCurrencyExchangeRatesOn(ctx context.Context, time time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrencyExchangeRatesOn", ctx, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrencyExchangeRatesOn indicates an expected call of UpdateCurrencyExchangeRatesOn.
func (mr *MockCurrencyExchangeRateUpdaterMockRecorder) UpdateCurrencyExchangeRatesOn(ctx, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrencyExchangeRatesOn", reflect.TypeOf((*MockCurrencyExchangeRateUpdater)(nil).UpdateCurrencyExchangeRatesOn), ctx, time)
}

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64, buttons ...map[string]string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{text, userID}
	for _, a := range buttons {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}, buttons ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{text, userID}, buttons...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), varargs...)
}

// MockExpenseDB is a mock of ExpenseDB interface.
type MockExpenseDB struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseDBMockRecorder
}

// MockExpenseDBMockRecorder is the mock recorder for MockExpenseDB.
type MockExpenseDBMockRecorder struct {
	mock *MockExpenseDB
}

// NewMockExpenseDB creates a new mock instance.
func NewMockExpenseDB(ctrl *gomock.Controller) *MockExpenseDB {
	mock := &MockExpenseDB{ctrl: ctrl}
	mock.recorder = &MockExpenseDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseDB) EXPECT() *MockExpenseDBMockRecorder {
	return m.recorder
}

// AddExpense mocks base method.
func (m *MockExpenseDB) AddExpense(ctx context.Context, userID, kopecks int64, title string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", ctx, userID, kopecks, title, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExpense indicates an expected call of AddExpense.
func (mr *MockExpenseDBMockRecorder) AddExpense(ctx, userID, kopecks, title, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockExpenseDB)(nil).AddExpense), ctx, userID, kopecks, title, date)
}

// GetExpenses mocks base method.
func (m *MockExpenseDB) GetExpenses(ctx context.Context, userID int64) ([]domain.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenses", ctx, userID)
	ret0, _ := ret[0].([]domain.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenses indicates an expected call of GetExpenses.
func (mr *MockExpenseDBMockRecorder) GetExpenses(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenses", reflect.TypeOf((*MockExpenseDB)(nil).GetExpenses), ctx, userID)
}

// MockUserDB is a mock of UserDB interface.
type MockUserDB struct {
	ctrl     *gomock.Controller
	recorder *MockUserDBMockRecorder
}

// MockUserDBMockRecorder is the mock recorder for MockUserDB.
type MockUserDBMockRecorder struct {
	mock *MockUserDB
}

// NewMockUserDB creates a new mock instance.
func NewMockUserDB(ctrl *gomock.Controller) *MockUserDB {
	mock := &MockUserDB{ctrl: ctrl}
	mock.recorder = &MockUserDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDB) EXPECT() *MockUserDBMockRecorder {
	return m.recorder
}

// ChangeDefaultCurrency mocks base method.
func (m *MockUserDB) ChangeDefaultCurrency(ctx context.Context, userID int64, currency string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDefaultCurrency", ctx, userID, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeDefaultCurrency indicates an expected call of ChangeDefaultCurrency.
func (mr *MockUserDBMockRecorder) ChangeDefaultCurrency(ctx, userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDefaultCurrency", reflect.TypeOf((*MockUserDB)(nil).ChangeDefaultCurrency), ctx, userID, currency)
}

// GetDefaultCurrency mocks base method.
func (m *MockUserDB) GetDefaultCurrency(ctx context.Context, userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultCurrency", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultCurrency indicates an expected call of GetDefaultCurrency.
func (mr *MockUserDBMockRecorder) GetDefaultCurrency(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCurrency", reflect.TypeOf((*MockUserDB)(nil).GetDefaultCurrency), ctx, userID)
}

// UserExist mocks base method.
func (m *MockUserDB) UserExist(ctx context.Context, userID int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExist", ctx, userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserExist indicates an expected call of UserExist.
func (mr *MockUserDBMockRecorder) UserExist(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExist", reflect.TypeOf((*MockUserDB)(nil).UserExist), ctx, userID)
}

// MockRateDB is a mock of RateDB interface.
type MockRateDB struct {
	ctrl     *gomock.Controller
	recorder *MockRateDBMockRecorder
}

// MockRateDBMockRecorder is the mock recorder for MockRateDB.
type MockRateDBMockRecorder struct {
	mock *MockRateDB
}

// NewMockRateDB creates a new mock instance.
func NewMockRateDB(ctrl *gomock.Controller) *MockRateDB {
	mock := &MockRateDB{ctrl: ctrl}
	mock.recorder = &MockRateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateDB) EXPECT() *MockRateDBMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockRateDB) GetRate(ctx context.Context, code string, date time.Time) *domain.Rate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", ctx, code, date)
	ret0, _ := ret[0].(*domain.Rate)
	return ret0
}

// GetRate indicates an expected call of GetRate.
func (mr *MockRateDBMockRecorder) GetRate(ctx, code, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockRateDB)(nil).GetRate), ctx, code, date)
}

// MockConfigGetter is a mock of ConfigGetter interface.
type MockConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGetterMockRecorder
}

// MockConfigGetterMockRecorder is the mock recorder for MockConfigGetter.
type MockConfigGetterMockRecorder struct {
	mock *MockConfigGetter
}

// NewMockConfigGetter creates a new mock instance.
func NewMockConfigGetter(ctrl *gomock.Controller) *MockConfigGetter {
	mock := &MockConfigGetter{ctrl: ctrl}
	mock.recorder = &MockConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGetter) EXPECT() *MockConfigGetterMockRecorder {
	return m.recorder
}

// GetBaseCurrency mocks base method.
func (m *MockConfigGetter) GetBaseCurrency() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseCurrency")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseCurrency indicates an expected call of GetBaseCurrency.
func (mr *MockConfigGetterMockRecorder) GetBaseCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseCurrency", reflect.TypeOf((*MockConfigGetter)(nil).GetBaseCurrency))
}

// SupportedCurrencyCodes mocks base method.
func (m *MockConfigGetter) SupportedCurrencyCodes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedCurrencyCodes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// SupportedCurrencyCodes indicates an expected call of SupportedCurrencyCodes.
func (mr *MockConfigGetterMockRecorder) SupportedCurrencyCodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedCurrencyCodes", reflect.TypeOf((*MockConfigGetter)(nil).SupportedCurrencyCodes))
}
