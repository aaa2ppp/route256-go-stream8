// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.ozon.dev/go/classroom-4/teachers/homework/internal/worker (interfaces: CurrencyExchangeRateUpdater,ConfigGetter,MessageFetcher,MessageProcessor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
	messages "gitlab.ozon.dev/go/classroom-4/teachers/homework/internal/model/messages"
)

// MockCurrencyExchangeRateUpdater is a mock of CurrencyExchangeRateUpdater interface.
type MockCurrencyExchangeRateUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyExchangeRateUpdaterMockRecorder
}

// MockCurrencyExchangeRateUpdaterMockRecorder is the mock recorder for MockCurrencyExchangeRateUpdater.
type MockCurrencyExchangeRateUpdaterMockRecorder struct {
	mock *MockCurrencyExchangeRateUpdater
}

// NewMockCurrencyExchangeRateUpdater creates a new mock instance.
func NewMockCurrencyExchangeRateUpdater(ctrl *gomock.Controller) *MockCurrencyExchangeRateUpdater {
	mock := &MockCurrencyExchangeRateUpdater{ctrl: ctrl}
	mock.recorder = &MockCurrencyExchangeRateUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyExchangeRateUpdater) EXPECT() *MockCurrencyExchangeRateUpdaterMockRecorder {
	return m.recorder
}

// UpdateCurrencyExchangeRatesOn mocks base method.
func (m *MockCurrencyExchangeRateUpdater) UpdateCurrencyExchangeRatesOn(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrencyExchangeRatesOn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrencyExchangeRatesOn indicates an expected call of UpdateCurrencyExchangeRatesOn.
func (mr *MockCurrencyExchangeRateUpdaterMockRecorder) UpdateCurrencyExchangeRatesOn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrencyExchangeRatesOn", reflect.TypeOf((*MockCurrencyExchangeRateUpdater)(nil).UpdateCurrencyExchangeRatesOn), arg0, arg1)
}

// MockConfigGetter is a mock of ConfigGetter interface.
type MockConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGetterMockRecorder
}

// MockConfigGetterMockRecorder is the mock recorder for MockConfigGetter.
type MockConfigGetterMockRecorder struct {
	mock *MockConfigGetter
}

// NewMockConfigGetter creates a new mock instance.
func NewMockConfigGetter(ctrl *gomock.Controller) *MockConfigGetter {
	mock := &MockConfigGetter{ctrl: ctrl}
	mock.recorder = &MockConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGetter) EXPECT() *MockConfigGetterMockRecorder {
	return m.recorder
}

// GetFrequencyExchangeRate mocks base method.
func (m *MockConfigGetter) GetFrequencyExchangeRate() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrequencyExchangeRate")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetFrequencyExchangeRate indicates an expected call of GetFrequencyExchangeRate.
func (mr *MockConfigGetterMockRecorder) GetFrequencyExchangeRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrequencyExchangeRate", reflect.TypeOf((*MockConfigGetter)(nil).GetFrequencyExchangeRate))
}

// MockMessageFetcher is a mock of MessageFetcher interface.
type MockMessageFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockMessageFetcherMockRecorder
}

// MockMessageFetcherMockRecorder is the mock recorder for MockMessageFetcher.
type MockMessageFetcherMockRecorder struct {
	mock *MockMessageFetcher
}

// NewMockMessageFetcher creates a new mock instance.
func NewMockMessageFetcher(ctrl *gomock.Controller) *MockMessageFetcher {
	mock := &MockMessageFetcher{ctrl: ctrl}
	mock.recorder = &MockMessageFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageFetcher) EXPECT() *MockMessageFetcherMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockMessageFetcher) Request(arg0 tgbotapi.CallbackConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockMessageFetcherMockRecorder) Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockMessageFetcher)(nil).Request), arg0)
}

// Start mocks base method.
func (m *MockMessageFetcher) Start() tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMessageFetcherMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMessageFetcher)(nil).Start))
}

// Stop mocks base method.
func (m *MockMessageFetcher) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockMessageFetcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMessageFetcher)(nil).Stop))
}

// MockMessageProcessor is a mock of MessageProcessor interface.
type MockMessageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessorMockRecorder
}

// MockMessageProcessorMockRecorder is the mock recorder for MockMessageProcessor.
type MockMessageProcessorMockRecorder struct {
	mock *MockMessageProcessor
}

// NewMockMessageProcessor creates a new mock instance.
func NewMockMessageProcessor(ctrl *gomock.Controller) *MockMessageProcessor {
	mock := &MockMessageProcessor{ctrl: ctrl}
	mock.recorder = &MockMessageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessor) EXPECT() *MockMessageProcessorMockRecorder {
	return m.recorder
}

// IncomingMessage mocks base method.
func (m *MockMessageProcessor) IncomingMessage(arg0 context.Context, arg1 messages.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncomingMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncomingMessage indicates an expected call of IncomingMessage.
func (mr *MockMessageProcessorMockRecorder) IncomingMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncomingMessage", reflect.TypeOf((*MockMessageProcessor)(nil).IncomingMessage), arg0, arg1)
}
