// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.ozon.dev/go/classroom-4/teachers/homework/internal/services (interfaces: ExchangeRateFetcherGateway,RateStorage,ConfigGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.ozon.dev/go/classroom-4/teachers/homework/internal/domain"
)

// MockExchangeRateFetcherGateway is a mock of ExchangeRateFetcherGateway interface.
type MockExchangeRateFetcherGateway struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateFetcherGatewayMockRecorder
}

// MockExchangeRateFetcherGatewayMockRecorder is the mock recorder for MockExchangeRateFetcherGateway.
type MockExchangeRateFetcherGatewayMockRecorder struct {
	mock *MockExchangeRateFetcherGateway
}

// NewMockExchangeRateFetcherGateway creates a new mock instance.
func NewMockExchangeRateFetcherGateway(ctrl *gomock.Controller) *MockExchangeRateFetcherGateway {
	mock := &MockExchangeRateFetcherGateway{ctrl: ctrl}
	mock.recorder = &MockExchangeRateFetcherGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateFetcherGateway) EXPECT() *MockExchangeRateFetcherGatewayMockRecorder {
	return m.recorder
}

// FetchRatesOn mocks base method.
func (m *MockExchangeRateFetcherGateway) FetchRatesOn(arg0 context.Context, arg1 time.Time) ([]domain.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRatesOn", arg0, arg1)
	ret0, _ := ret[0].([]domain.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRatesOn indicates an expected call of FetchRatesOn.
func (mr *MockExchangeRateFetcherGatewayMockRecorder) FetchRatesOn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRatesOn", reflect.TypeOf((*MockExchangeRateFetcherGateway)(nil).FetchRatesOn), arg0, arg1)
}

// MockRateStorage is a mock of RateStorage interface.
type MockRateStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRateStorageMockRecorder
}

// MockRateStorageMockRecorder is the mock recorder for MockRateStorage.
type MockRateStorageMockRecorder struct {
	mock *MockRateStorage
}

// NewMockRateStorage creates a new mock instance.
func NewMockRateStorage(ctrl *gomock.Controller) *MockRateStorage {
	mock := &MockRateStorage{ctrl: ctrl}
	mock.recorder = &MockRateStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateStorage) EXPECT() *MockRateStorageMockRecorder {
	return m.recorder
}

// AddRate mocks base method.
func (m *MockRateStorage) AddRate(arg0 context.Context, arg1 time.Time, arg2 domain.Rate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRate indicates an expected call of AddRate.
func (mr *MockRateStorageMockRecorder) AddRate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRate", reflect.TypeOf((*MockRateStorage)(nil).AddRate), arg0, arg1, arg2)
}

// MockConfigGetter is a mock of ConfigGetter interface.
type MockConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGetterMockRecorder
}

// MockConfigGetterMockRecorder is the mock recorder for MockConfigGetter.
type MockConfigGetterMockRecorder struct {
	mock *MockConfigGetter
}

// NewMockConfigGetter creates a new mock instance.
func NewMockConfigGetter(ctrl *gomock.Controller) *MockConfigGetter {
	mock := &MockConfigGetter{ctrl: ctrl}
	mock.recorder = &MockConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGetter) EXPECT() *MockConfigGetterMockRecorder {
	return m.recorder
}

// SupportedCurrencyCodes mocks base method.
func (m *MockConfigGetter) SupportedCurrencyCodes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedCurrencyCodes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// SupportedCurrencyCodes indicates an expected call of SupportedCurrencyCodes.
func (mr *MockConfigGetterMockRecorder) SupportedCurrencyCodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedCurrencyCodes", reflect.TypeOf((*MockConfigGetter)(nil).SupportedCurrencyCodes))
}
