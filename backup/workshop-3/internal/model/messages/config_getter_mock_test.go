package messages

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/go/classroom-4/teachers/homework/internal/model/messages.ConfigGetter -o ./config_getter_mock_test.go -n ConfigGetterMock

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ConfigGetterMock implements ConfigGetter
type ConfigGetterMock struct {
	t minimock.Tester

	funcGetBaseCurrency          func() (s1 string)
	inspectFuncGetBaseCurrency   func()
	afterGetBaseCurrencyCounter  uint64
	beforeGetBaseCurrencyCounter uint64
	GetBaseCurrencyMock          mConfigGetterMockGetBaseCurrency

	funcSupportedCurrencyCodes          func() (sa1 []string)
	inspectFuncSupportedCurrencyCodes   func()
	afterSupportedCurrencyCodesCounter  uint64
	beforeSupportedCurrencyCodesCounter uint64
	SupportedCurrencyCodesMock          mConfigGetterMockSupportedCurrencyCodes
}

// NewConfigGetterMock returns a mock for ConfigGetter
func NewConfigGetterMock(t minimock.Tester) *ConfigGetterMock {
	m := &ConfigGetterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetBaseCurrencyMock = mConfigGetterMockGetBaseCurrency{mock: m}

	m.SupportedCurrencyCodesMock = mConfigGetterMockSupportedCurrencyCodes{mock: m}

	return m
}

type mConfigGetterMockGetBaseCurrency struct {
	mock               *ConfigGetterMock
	defaultExpectation *ConfigGetterMockGetBaseCurrencyExpectation
	expectations       []*ConfigGetterMockGetBaseCurrencyExpectation
}

// ConfigGetterMockGetBaseCurrencyExpectation specifies expectation struct of the ConfigGetter.GetBaseCurrency
type ConfigGetterMockGetBaseCurrencyExpectation struct {
	mock *ConfigGetterMock

	results *ConfigGetterMockGetBaseCurrencyResults
	Counter uint64
}

// ConfigGetterMockGetBaseCurrencyResults contains results of the ConfigGetter.GetBaseCurrency
type ConfigGetterMockGetBaseCurrencyResults struct {
	s1 string
}

// Expect sets up expected params for ConfigGetter.GetBaseCurrency
func (mmGetBaseCurrency *mConfigGetterMockGetBaseCurrency) Expect() *mConfigGetterMockGetBaseCurrency {
	if mmGetBaseCurrency.mock.funcGetBaseCurrency != nil {
		mmGetBaseCurrency.mock.t.Fatalf("ConfigGetterMock.GetBaseCurrency mock is already set by Set")
	}

	if mmGetBaseCurrency.defaultExpectation == nil {
		mmGetBaseCurrency.defaultExpectation = &ConfigGetterMockGetBaseCurrencyExpectation{}
	}

	return mmGetBaseCurrency
}

// Inspect accepts an inspector function that has same arguments as the ConfigGetter.GetBaseCurrency
func (mmGetBaseCurrency *mConfigGetterMockGetBaseCurrency) Inspect(f func()) *mConfigGetterMockGetBaseCurrency {
	if mmGetBaseCurrency.mock.inspectFuncGetBaseCurrency != nil {
		mmGetBaseCurrency.mock.t.Fatalf("Inspect function is already set for ConfigGetterMock.GetBaseCurrency")
	}

	mmGetBaseCurrency.mock.inspectFuncGetBaseCurrency = f

	return mmGetBaseCurrency
}

// Return sets up results that will be returned by ConfigGetter.GetBaseCurrency
func (mmGetBaseCurrency *mConfigGetterMockGetBaseCurrency) Return(s1 string) *ConfigGetterMock {
	if mmGetBaseCurrency.mock.funcGetBaseCurrency != nil {
		mmGetBaseCurrency.mock.t.Fatalf("ConfigGetterMock.GetBaseCurrency mock is already set by Set")
	}

	if mmGetBaseCurrency.defaultExpectation == nil {
		mmGetBaseCurrency.defaultExpectation = &ConfigGetterMockGetBaseCurrencyExpectation{mock: mmGetBaseCurrency.mock}
	}
	mmGetBaseCurrency.defaultExpectation.results = &ConfigGetterMockGetBaseCurrencyResults{s1}
	return mmGetBaseCurrency.mock
}

//Set uses given function f to mock the ConfigGetter.GetBaseCurrency method
func (mmGetBaseCurrency *mConfigGetterMockGetBaseCurrency) Set(f func() (s1 string)) *ConfigGetterMock {
	if mmGetBaseCurrency.defaultExpectation != nil {
		mmGetBaseCurrency.mock.t.Fatalf("Default expectation is already set for the ConfigGetter.GetBaseCurrency method")
	}

	if len(mmGetBaseCurrency.expectations) > 0 {
		mmGetBaseCurrency.mock.t.Fatalf("Some expectations are already set for the ConfigGetter.GetBaseCurrency method")
	}

	mmGetBaseCurrency.mock.funcGetBaseCurrency = f
	return mmGetBaseCurrency.mock
}

// GetBaseCurrency implements ConfigGetter
func (mmGetBaseCurrency *ConfigGetterMock) GetBaseCurrency() (s1 string) {
	mm_atomic.AddUint64(&mmGetBaseCurrency.beforeGetBaseCurrencyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetBaseCurrency.afterGetBaseCurrencyCounter, 1)

	if mmGetBaseCurrency.inspectFuncGetBaseCurrency != nil {
		mmGetBaseCurrency.inspectFuncGetBaseCurrency()
	}

	if mmGetBaseCurrency.GetBaseCurrencyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetBaseCurrency.GetBaseCurrencyMock.defaultExpectation.Counter, 1)

		mm_results := mmGetBaseCurrency.GetBaseCurrencyMock.defaultExpectation.results
		if mm_results == nil {
			mmGetBaseCurrency.t.Fatal("No results are set for the ConfigGetterMock.GetBaseCurrency")
		}
		return (*mm_results).s1
	}
	if mmGetBaseCurrency.funcGetBaseCurrency != nil {
		return mmGetBaseCurrency.funcGetBaseCurrency()
	}
	mmGetBaseCurrency.t.Fatalf("Unexpected call to ConfigGetterMock.GetBaseCurrency.")
	return
}

// GetBaseCurrencyAfterCounter returns a count of finished ConfigGetterMock.GetBaseCurrency invocations
func (mmGetBaseCurrency *ConfigGetterMock) GetBaseCurrencyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBaseCurrency.afterGetBaseCurrencyCounter)
}

// GetBaseCurrencyBeforeCounter returns a count of ConfigGetterMock.GetBaseCurrency invocations
func (mmGetBaseCurrency *ConfigGetterMock) GetBaseCurrencyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBaseCurrency.beforeGetBaseCurrencyCounter)
}

// MinimockGetBaseCurrencyDone returns true if the count of the GetBaseCurrency invocations corresponds
// the number of defined expectations
func (m *ConfigGetterMock) MinimockGetBaseCurrencyDone() bool {
	for _, e := range m.GetBaseCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetBaseCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetBaseCurrencyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBaseCurrency != nil && mm_atomic.LoadUint64(&m.afterGetBaseCurrencyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetBaseCurrencyInspect logs each unmet expectation
func (m *ConfigGetterMock) MinimockGetBaseCurrencyInspect() {
	for _, e := range m.GetBaseCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ConfigGetterMock.GetBaseCurrency")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetBaseCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetBaseCurrencyCounter) < 1 {
		m.t.Error("Expected call to ConfigGetterMock.GetBaseCurrency")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBaseCurrency != nil && mm_atomic.LoadUint64(&m.afterGetBaseCurrencyCounter) < 1 {
		m.t.Error("Expected call to ConfigGetterMock.GetBaseCurrency")
	}
}

type mConfigGetterMockSupportedCurrencyCodes struct {
	mock               *ConfigGetterMock
	defaultExpectation *ConfigGetterMockSupportedCurrencyCodesExpectation
	expectations       []*ConfigGetterMockSupportedCurrencyCodesExpectation
}

// ConfigGetterMockSupportedCurrencyCodesExpectation specifies expectation struct of the ConfigGetter.SupportedCurrencyCodes
type ConfigGetterMockSupportedCurrencyCodesExpectation struct {
	mock *ConfigGetterMock

	results *ConfigGetterMockSupportedCurrencyCodesResults
	Counter uint64
}

// ConfigGetterMockSupportedCurrencyCodesResults contains results of the ConfigGetter.SupportedCurrencyCodes
type ConfigGetterMockSupportedCurrencyCodesResults struct {
	sa1 []string
}

// Expect sets up expected params for ConfigGetter.SupportedCurrencyCodes
func (mmSupportedCurrencyCodes *mConfigGetterMockSupportedCurrencyCodes) Expect() *mConfigGetterMockSupportedCurrencyCodes {
	if mmSupportedCurrencyCodes.mock.funcSupportedCurrencyCodes != nil {
		mmSupportedCurrencyCodes.mock.t.Fatalf("ConfigGetterMock.SupportedCurrencyCodes mock is already set by Set")
	}

	if mmSupportedCurrencyCodes.defaultExpectation == nil {
		mmSupportedCurrencyCodes.defaultExpectation = &ConfigGetterMockSupportedCurrencyCodesExpectation{}
	}

	return mmSupportedCurrencyCodes
}

// Inspect accepts an inspector function that has same arguments as the ConfigGetter.SupportedCurrencyCodes
func (mmSupportedCurrencyCodes *mConfigGetterMockSupportedCurrencyCodes) Inspect(f func()) *mConfigGetterMockSupportedCurrencyCodes {
	if mmSupportedCurrencyCodes.mock.inspectFuncSupportedCurrencyCodes != nil {
		mmSupportedCurrencyCodes.mock.t.Fatalf("Inspect function is already set for ConfigGetterMock.SupportedCurrencyCodes")
	}

	mmSupportedCurrencyCodes.mock.inspectFuncSupportedCurrencyCodes = f

	return mmSupportedCurrencyCodes
}

// Return sets up results that will be returned by ConfigGetter.SupportedCurrencyCodes
func (mmSupportedCurrencyCodes *mConfigGetterMockSupportedCurrencyCodes) Return(sa1 []string) *ConfigGetterMock {
	if mmSupportedCurrencyCodes.mock.funcSupportedCurrencyCodes != nil {
		mmSupportedCurrencyCodes.mock.t.Fatalf("ConfigGetterMock.SupportedCurrencyCodes mock is already set by Set")
	}

	if mmSupportedCurrencyCodes.defaultExpectation == nil {
		mmSupportedCurrencyCodes.defaultExpectation = &ConfigGetterMockSupportedCurrencyCodesExpectation{mock: mmSupportedCurrencyCodes.mock}
	}
	mmSupportedCurrencyCodes.defaultExpectation.results = &ConfigGetterMockSupportedCurrencyCodesResults{sa1}
	return mmSupportedCurrencyCodes.mock
}

//Set uses given function f to mock the ConfigGetter.SupportedCurrencyCodes method
func (mmSupportedCurrencyCodes *mConfigGetterMockSupportedCurrencyCodes) Set(f func() (sa1 []string)) *ConfigGetterMock {
	if mmSupportedCurrencyCodes.defaultExpectation != nil {
		mmSupportedCurrencyCodes.mock.t.Fatalf("Default expectation is already set for the ConfigGetter.SupportedCurrencyCodes method")
	}

	if len(mmSupportedCurrencyCodes.expectations) > 0 {
		mmSupportedCurrencyCodes.mock.t.Fatalf("Some expectations are already set for the ConfigGetter.SupportedCurrencyCodes method")
	}

	mmSupportedCurrencyCodes.mock.funcSupportedCurrencyCodes = f
	return mmSupportedCurrencyCodes.mock
}

// SupportedCurrencyCodes implements ConfigGetter
func (mmSupportedCurrencyCodes *ConfigGetterMock) SupportedCurrencyCodes() (sa1 []string) {
	mm_atomic.AddUint64(&mmSupportedCurrencyCodes.beforeSupportedCurrencyCodesCounter, 1)
	defer mm_atomic.AddUint64(&mmSupportedCurrencyCodes.afterSupportedCurrencyCodesCounter, 1)

	if mmSupportedCurrencyCodes.inspectFuncSupportedCurrencyCodes != nil {
		mmSupportedCurrencyCodes.inspectFuncSupportedCurrencyCodes()
	}

	if mmSupportedCurrencyCodes.SupportedCurrencyCodesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSupportedCurrencyCodes.SupportedCurrencyCodesMock.defaultExpectation.Counter, 1)

		mm_results := mmSupportedCurrencyCodes.SupportedCurrencyCodesMock.defaultExpectation.results
		if mm_results == nil {
			mmSupportedCurrencyCodes.t.Fatal("No results are set for the ConfigGetterMock.SupportedCurrencyCodes")
		}
		return (*mm_results).sa1
	}
	if mmSupportedCurrencyCodes.funcSupportedCurrencyCodes != nil {
		return mmSupportedCurrencyCodes.funcSupportedCurrencyCodes()
	}
	mmSupportedCurrencyCodes.t.Fatalf("Unexpected call to ConfigGetterMock.SupportedCurrencyCodes.")
	return
}

// SupportedCurrencyCodesAfterCounter returns a count of finished ConfigGetterMock.SupportedCurrencyCodes invocations
func (mmSupportedCurrencyCodes *ConfigGetterMock) SupportedCurrencyCodesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSupportedCurrencyCodes.afterSupportedCurrencyCodesCounter)
}

// SupportedCurrencyCodesBeforeCounter returns a count of ConfigGetterMock.SupportedCurrencyCodes invocations
func (mmSupportedCurrencyCodes *ConfigGetterMock) SupportedCurrencyCodesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSupportedCurrencyCodes.beforeSupportedCurrencyCodesCounter)
}

// MinimockSupportedCurrencyCodesDone returns true if the count of the SupportedCurrencyCodes invocations corresponds
// the number of defined expectations
func (m *ConfigGetterMock) MinimockSupportedCurrencyCodesDone() bool {
	for _, e := range m.SupportedCurrencyCodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SupportedCurrencyCodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSupportedCurrencyCodesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSupportedCurrencyCodes != nil && mm_atomic.LoadUint64(&m.afterSupportedCurrencyCodesCounter) < 1 {
		return false
	}
	return true
}

// MinimockSupportedCurrencyCodesInspect logs each unmet expectation
func (m *ConfigGetterMock) MinimockSupportedCurrencyCodesInspect() {
	for _, e := range m.SupportedCurrencyCodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ConfigGetterMock.SupportedCurrencyCodes")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SupportedCurrencyCodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSupportedCurrencyCodesCounter) < 1 {
		m.t.Error("Expected call to ConfigGetterMock.SupportedCurrencyCodes")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSupportedCurrencyCodes != nil && mm_atomic.LoadUint64(&m.afterSupportedCurrencyCodesCounter) < 1 {
		m.t.Error("Expected call to ConfigGetterMock.SupportedCurrencyCodes")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ConfigGetterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetBaseCurrencyInspect()

		m.MinimockSupportedCurrencyCodesInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ConfigGetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ConfigGetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetBaseCurrencyDone() &&
		m.MinimockSupportedCurrencyCodesDone()
}
