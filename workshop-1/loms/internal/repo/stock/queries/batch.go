// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: batch.go

package queries

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const reserve = `-- name: Reserve :batchone
WITH rows AS (
    UPDATE stock SET available = available - $1, reserved = reserved + $1
    WHERE sku = $2 AND available >= $1
    RETURNING sku
)
SELECT COUNT(*)
`

type ReserveBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type ReserveParams struct {
	Count int64
	Sku   int32
}

func (q *Queries) Reserve(ctx context.Context, arg []ReserveParams) *ReserveBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Count,
			a.Sku,
		}
		batch.Queue(reserve, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &ReserveBatchResults{br, len(arg), false}
}

func (b *ReserveBatchResults) QueryRow(f func(int, int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var count int64
		if b.closed {
			if f != nil {
				f(t, count, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&count)
		if f != nil {
			f(t, count, err)
		}
	}
}

func (b *ReserveBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const reserveCancel = `-- name: ReserveCancel :batchone
WITH rows AS (
    UPDATE stock SET available = available + $1, reserved = reserved - $1 
    WHERE sku = $2 AND reserved >= $1
    RETURNING sku
)
SELECT COUNT(*)
`

type ReserveCancelBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type ReserveCancelParams struct {
	Count int64
	Sku   int32
}

func (q *Queries) ReserveCancel(ctx context.Context, arg []ReserveCancelParams) *ReserveCancelBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Count,
			a.Sku,
		}
		batch.Queue(reserveCancel, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &ReserveCancelBatchResults{br, len(arg), false}
}

func (b *ReserveCancelBatchResults) QueryRow(f func(int, int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var count int64
		if b.closed {
			if f != nil {
				f(t, count, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&count)
		if f != nil {
			f(t, count, err)
		}
	}
}

func (b *ReserveCancelBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const reserveRemove = `-- name: ReserveRemove :batchone
WITH rows AS (
    UPDATE stock SET reserved = reserved - $1
    WHERE sku = $2 AND reserved >= $1
    RETURNING sku
)
SELECT COUNT(*)
`

type ReserveRemoveBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type ReserveRemoveParams struct {
	Count int64
	Sku   int32
}

func (q *Queries) ReserveRemove(ctx context.Context, arg []ReserveRemoveParams) *ReserveRemoveBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Count,
			a.Sku,
		}
		batch.Queue(reserveRemove, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &ReserveRemoveBatchResults{br, len(arg), false}
}

func (b *ReserveRemoveBatchResults) QueryRow(f func(int, int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var count int64
		if b.closed {
			if f != nil {
				f(t, count, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&count)
		if f != nil {
			f(t, count, err)
		}
	}
}

func (b *ReserveRemoveBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
