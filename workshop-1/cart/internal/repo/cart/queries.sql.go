// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package cart

import (
	"context"
)

const addArrays = `-- name: AddArrays :exec
INSERT INTO cart (user_id, sku, count)
SELECT 
    UNNEST($1::bigint[]) AS user_id,
    UNNEST($2::int[]   ) AS sku,
    UNNEST($3::int[]   ) AS count    
ON CONFLICT (user_id, sku) 
DO UPDATE SET count = cart.count + EXCLUDED.count
`

type AddArraysParams struct {
	Column1 []int64 `json:"column_1"`
	Column2 []int32 `json:"column_2"`
	Column3 []int32 `json:"column_3"`
}

func (q *Queries) AddArrays(ctx context.Context, arg AddArraysParams) error {
	_, err := q.db.Exec(ctx, addArrays, arg.Column1, arg.Column2, arg.Column3)
	return err
}

const clear = `-- name: Clear :exec
DELETE FROM cart WHERE user_id = $1
`

func (q *Queries) Clear(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, clear, userID)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM cart WHERE user_id = $1 AND sku = $2
`

type DeleteParams struct {
	UserID int64 `json:"user_id"`
	Sku    int32 `json:"sku"`
}

func (q *Queries) Delete(ctx context.Context, arg DeleteParams) error {
	_, err := q.db.Exec(ctx, delete, arg.UserID, arg.Sku)
	return err
}

const list = `-- name: List :many
SELECT user_id, sku, count FROM cart WHERE user_id = $1
`

func (q *Queries) List(ctx context.Context, userID int64) ([]Cart, error) {
	rows, err := q.db.Query(ctx, list, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(&i.UserID, &i.Sku, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
