// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: batch.go

package cart

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const addBatch = `-- name: AddBatch :batchexec
INSERT INTO cart (user_id, sku, count) VALUES ($1, $2, $3)
ON CONFLICT (user_id, sku) DO UPDATE set count = count + $3
`

type AddBatchBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type AddBatchParams struct {
	UserID int64 `json:"user_id"`
	Sku    int32 `json:"sku"`
	Count  int32 `json:"count"`
}

func (q *Queries) AddBatch(ctx context.Context, arg []AddBatchParams) *AddBatchBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.UserID,
			a.Sku,
			a.Count,
		}
		batch.Queue(addBatch, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &AddBatchBatchResults{br, len(arg), false}
}

func (b *AddBatchBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *AddBatchBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
